name: 🚀 Deploy to Railway

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: 📦 Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔍 Lint Backend
      working-directory: ./backend
      run: npm run lint || true

    - name: 🔍 Lint Frontend
      working-directory: ./frontend
      run: npm run lint || true

    - name: 🧪 Test Backend
      working-directory: ./backend
      run: npm test || true

    - name: 🧪 Test Frontend
      working-directory: ./frontend
      run: npm test || true

    - name: 🏗️ Build Backend
      working-directory: ./backend
      run: npm run build

    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build

  # Job 2: Build Docker Images
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏷️ Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.railway
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: 🐳 Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.railway
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  # Job 3: Deploy to Railway
  deploy-railway:
    needs: [build-and-test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Install Railway CLI
      run: npm install -g @railway/cli

    - name: 🚀 Deploy Backend to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./backend
      run: |
        railway login --token $RAILWAY_TOKEN
        railway up --detach

    - name: 🚀 Deploy Frontend to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./frontend
      run: |
        railway login --token $RAILWAY_TOKEN
        railway up --detach

    - name: ⏳ Wait for deployment
      run: sleep 60

    - name: 🔍 Verify deployment
      id: verify
      run: |
        # Aquí puedes agregar scripts de verificación
        echo "Deployment verification would go here"
        echo "url=https://your-app.railway.app" >> $GITHUB_OUTPUT

  # Job 4: Run Database Migrations
  migrate-database:
    needs: deploy-railway
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Install Railway CLI
      run: npm install -g @railway/cli

    - name: 🗄️ Run Database Migrations
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./backend
      run: |
        railway login --token $RAILWAY_TOKEN
        railway run npx prisma migrate deploy

    - name: 🌱 Seed Database (if needed)
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./backend
      run: |
        railway login --token $RAILWAY_TOKEN
        railway run npx prisma db seed || echo "Seeding skipped or failed"

  # Job 5: Notify Success
  notify:
    needs: [deploy-railway, migrate-database]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📊 Deployment Status
      run: |
        if [ "${{ needs.deploy-railway.result }}" == "success" ] && [ "${{ needs.migrate-database.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "✅ Backend deployed"
          echo "✅ Frontend deployed"
          echo "✅ Database migrated"
        else
          echo "❌ Deployment failed"
          echo "Backend: ${{ needs.deploy-railway.result }}"
          echo "Database: ${{ needs.migrate-database.result }}"
        fi

    # Opcional: Notificar a Slack, Discord, etc.
    # - name: 📢 Notify Slack
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}