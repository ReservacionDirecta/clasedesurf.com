#!/bin/bash

# Script para construir y subir im√°genes Docker a Docker Hub
# Uso: ./docker-build-push-all.sh [username] [version]

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Par√°metros
USERNAME=${1:-yerct}
VERSION=${2:-latest}
SKIP_BUILD=${SKIP_BUILD:-false}
SKIP_PUSH=${SKIP_PUSH:-false}
BUILD_ONLY=${BUILD_ONLY:-false}

echo -e "${CYAN}üê≥ Clase de Surf - Docker Build & Push Script${NC}"
echo -e "${CYAN}=============================================${NC}"
echo ""

# Verificar que Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker no est√° instalado${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker est√° instalado${NC}"

# Verificar que Docker est√° corriendo
if ! docker ps &> /dev/null; then
    echo -e "${RED}‚ùå Docker no est√° corriendo${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker est√° corriendo${NC}"

echo ""
echo -e "${CYAN}üìã Configuraci√≥n:${NC}"
echo -e "   Usuario Docker Hub: ${USERNAME}"
echo -e "   Versi√≥n: ${VERSION}"
echo ""

# Login a Docker Hub (solo si no es BUILD_ONLY)
if [ "$BUILD_ONLY" != "true" ]; then
    echo -e "${YELLOW}üîê Iniciando sesi√≥n en Docker Hub...${NC}"
    echo -e "${YELLOW}   Por favor, ingresa tus credenciales de Docker Hub${NC}"
    docker login
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Error al iniciar sesi√≥n en Docker Hub${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Sesi√≥n iniciada correctamente${NC}"
    echo ""
fi

# Funci√≥n para construir imagen
build_image() {
    local service=$1
    local context=$2
    local image_name=$3
    
    echo -e "${CYAN}üî® Construyendo ${service}...${NC}"
    echo -e "   Contexto: ${context}"
    echo -e "   Imagen: ${image_name}"
    
    docker build -t "${image_name}" -f "${context}/Dockerfile" "${context}"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Error al construir ${service}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ ${service} construido correctamente${NC}"
    echo ""
    return 0
}

# Funci√≥n para subir imagen
push_image() {
    local service=$1
    local image_name=$2
    
    echo -e "${CYAN}üì§ Subiendo ${service} a Docker Hub...${NC}"
    echo -e "   Imagen: ${image_name}"
    
    docker push "${image_name}"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Error al subir ${service}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ ${service} subido correctamente${NC}"
    echo ""
    return 0
}

# Construir Backend
if [ "$SKIP_BUILD" != "true" ]; then
    BACKEND_IMAGE="${USERNAME}/clasedesurf-backend:${VERSION}"
    build_image "Backend" "./backend" "${BACKEND_IMAGE}"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Fall√≥ la construcci√≥n del Backend${NC}"
        exit 1
    fi
    
    # Tag como latest si no es latest
    if [ "$VERSION" != "latest" ]; then
        echo -e "${YELLOW}üè∑Ô∏è  Etiquetando Backend como latest...${NC}"
        docker tag "${BACKEND_IMAGE}" "${USERNAME}/clasedesurf-backend:latest"
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Saltando construcci√≥n del Backend${NC}"
    echo ""
fi

# Construir Frontend
if [ "$SKIP_BUILD" != "true" ]; then
    FRONTEND_IMAGE="${USERNAME}/clasedesurf-frontend:${VERSION}"
    build_image "Frontend" "./frontend" "${FRONTEND_IMAGE}"
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Fall√≥ la construcci√≥n del Frontend${NC}"
        exit 1
    fi
    
    # Tag como latest si no es latest
    if [ "$VERSION" != "latest" ]; then
        echo -e "${YELLOW}üè∑Ô∏è  Etiquetando Frontend como latest...${NC}"
        docker tag "${FRONTEND_IMAGE}" "${USERNAME}/clasedesurf-frontend:latest"
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Saltando construcci√≥n del Frontend${NC}"
    echo ""
fi

# Subir im√°genes a Docker Hub
if [ "$SKIP_PUSH" != "true" ] && [ "$BUILD_ONLY" != "true" ]; then
    echo -e "${CYAN}üì§ Subiendo im√°genes a Docker Hub...${NC}"
    echo ""
    
    # Subir Backend
    BACKEND_IMAGE="${USERNAME}/clasedesurf-backend:${VERSION}"
    push_image "Backend" "${BACKEND_IMAGE}"
    
    if [ "$VERSION" != "latest" ]; then
        push_image "Backend (latest)" "${USERNAME}/clasedesurf-backend:latest"
    fi
    
    # Subir Frontend
    FRONTEND_IMAGE="${USERNAME}/clasedesurf-frontend:${VERSION}"
    push_image "Frontend" "${FRONTEND_IMAGE}"
    
    if [ "$VERSION" != "latest" ]; then
        push_image "Frontend (latest)" "${USERNAME}/clasedesurf-frontend:latest"
    fi
    
    echo -e "${GREEN}‚úÖ Todas las im√°genes subidas correctamente${NC}"
elif [ "$BUILD_ONLY" == "true" ]; then
    echo -e "${YELLOW}‚è≠Ô∏è  Modo BuildOnly: No se subir√°n las im√°genes${NC}"
else
    echo -e "${YELLOW}‚è≠Ô∏è  Saltando subida de im√°genes${NC}"
fi

echo ""
echo -e "${CYAN}=============================================${NC}"
echo -e "${GREEN}‚úÖ Proceso completado!${NC}"
echo ""
echo -e "${CYAN}üìã Im√°genes creadas:${NC}"
echo -e "   - ${USERNAME}/clasedesurf-backend:${VERSION}"
echo -e "   - ${USERNAME}/clasedesurf-frontend:${VERSION}"

if [ "$VERSION" != "latest" ]; then
    echo -e "   - ${USERNAME}/clasedesurf-backend:latest"
    echo -e "   - ${USERNAME}/clasedesurf-frontend:latest"
fi

echo ""
echo -e "${CYAN}üöÄ Para desplegar la aplicaci√≥n:${NC}"
echo -e "   docker-compose up -d"
echo ""
echo -e "${CYAN}üîç Para ver las im√°genes en Docker Hub:${NC}"
echo -e "   https://hub.docker.com/u/${USERNAME}"
echo ""
