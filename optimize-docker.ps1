# Script de optimizaci√≥n Docker para Railway
param(
    [switch]$CleanAll = $false,
    [switch]$PruneImages = $false,
    [switch]$PruneContainers = $false,
    [switch]$PruneVolumes = $false,
    [switch]$PruneNetworks = $false,
    [switch]$OptimizeImages = $false,
    [switch]$AnalyzeSize = $false
)

Write-Host "üîß Optimizaci√≥n Docker - Clasedesurf.com" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor White

# Funci√≥n para mostrar tama√±o en formato legible
function Format-FileSize {
    param([long]$Size)
    
    if ($Size -gt 1GB) {
        return "{0:N2} GB" -f ($Size / 1GB)
    } elseif ($Size -gt 1MB) {
        return "{0:N2} MB" -f ($Size / 1MB)
    } elseif ($Size -gt 1KB) {
        return "{0:N2} KB" -f ($Size / 1KB)
    } else {
        return "$Size bytes"
    }
}

# Funci√≥n para obtener estad√≠sticas de Docker
function Get-DockerStats {
    Write-Host "üìä Analizando uso de Docker..." -ForegroundColor Yellow
    
    try {
        # Obtener informaci√≥n del sistema Docker
        $dockerInfo = docker system df --format "table {{.Type}}\t{{.Total}}\t{{.Active}}\t{{.Size}}\t{{.Reclaimable}}"
        
        Write-Host "" -ForegroundColor White
        Write-Host "üíæ Uso de espacio Docker:" -ForegroundColor Cyan
        Write-Host $dockerInfo -ForegroundColor White
        
        # Obtener espacio total usado
        $systemDf = docker system df -v 2>$null
        if ($systemDf) {
            Write-Host "" -ForegroundColor White
            Write-Host "üìà Detalles de uso:" -ForegroundColor Cyan
            Write-Host $systemDf -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Error obteniendo estad√≠sticas: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Funci√≥n para limpiar contenedores
function Clean-Containers {
    Write-Host "üßπ Limpiando contenedores..." -ForegroundColor Yellow
    
    # Contenedores detenidos
    $stoppedContainers = docker ps -aq --filter "status=exited"
    if ($stoppedContainers) {
        Write-Host "Eliminando contenedores detenidos..." -ForegroundColor Gray
        docker rm $stoppedContainers
        Write-Host "‚úÖ Contenedores detenidos eliminados" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ No hay contenedores detenidos para eliminar" -ForegroundColor Green
    }
    
    # Contenedores hu√©rfanos
    Write-Host "Eliminando contenedores hu√©rfanos..." -ForegroundColor Gray
    docker container prune -f
}

# Funci√≥n para limpiar im√°genes
function Clean-Images {
    Write-Host "üñºÔ∏è  Limpiando im√°genes..." -ForegroundColor Yellow
    
    # Im√°genes sin usar
    Write-Host "Eliminando im√°genes sin usar..." -ForegroundColor Gray
    docker image prune -f
    
    # Im√°genes colgantes (dangling)
    $danglingImages = docker images -f "dangling=true" -q
    if ($danglingImages) {
        Write-Host "Eliminando im√°genes colgantes..." -ForegroundColor Gray
        docker rmi $danglingImages
        Write-Host "‚úÖ Im√°genes colgantes eliminadas" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ No hay im√°genes colgantes" -ForegroundColor Green
    }
}

# Funci√≥n para limpiar vol√∫menes
function Clean-Volumes {
    Write-Host "üíΩ Limpiando vol√∫menes..." -ForegroundColor Yellow
    
    Write-Host "Eliminando vol√∫menes sin usar..." -ForegroundColor Gray
    docker volume prune -f
    Write-Host "‚úÖ Vol√∫menes limpiados" -ForegroundColor Green
}

# Funci√≥n para limpiar redes
function Clean-Networks {
    Write-Host "üåê Limpiando redes..." -ForegroundColor Yellow
    
    Write-Host "Eliminando redes sin usar..." -ForegroundColor Gray
    docker network prune -f
    Write-Host "‚úÖ Redes limpiadas" -ForegroundColor Green
}

# Funci√≥n para optimizar im√°genes
function Optimize-Images {
    Write-Host "‚ö° Optimizando im√°genes de Clasedesurf..." -ForegroundColor Yellow
    
    $images = docker images "clasedesurf/*" --format "{{.Repository}}:{{.Tag}}"
    
    if ($images) {
        Write-Host "üìã Im√°genes encontradas:" -ForegroundColor Cyan
        foreach ($image in $images) {
            $size = docker images $image --format "{{.Size}}"
            Write-Host "  $image - $size" -ForegroundColor White
        }
        
        Write-Host "" -ForegroundColor White
        Write-Host "üí° Sugerencias de optimizaci√≥n:" -ForegroundColor Cyan
        Write-Host "1. Usar .dockerignore para excluir archivos innecesarios" -ForegroundColor White
        Write-Host "2. Usar multi-stage builds (ya implementado)" -ForegroundColor White
        Write-Host "3. Limpiar cach√© de npm despu√©s de la instalaci√≥n" -ForegroundColor White
        Write-Host "4. Usar im√°genes base Alpine (ya implementado)" -ForegroundColor White
    } else {
        Write-Host "‚ÑπÔ∏è  No se encontraron im√°genes de Clasedesurf" -ForegroundColor Gray
    }
}

# Funci√≥n para an√°lisis detallado de tama√±o
function Analyze-ImageSizes {
    Write-Host "üîç Analizando tama√±os de im√°genes..." -ForegroundColor Yellow
    
    # An√°lisis de capas de im√°genes
    $clasedesurfImages = docker images "clasedesurf/*" --format "{{.Repository}}:{{.Tag}}"
    
    foreach ($image in $clasedesurfImages) {
        Write-Host "" -ForegroundColor White
        Write-Host "üìä An√°lisis de $image:" -ForegroundColor Cyan
        
        try {
            # Obtener historial de la imagen
            $history = docker history $image --format "table {{.CreatedBy}}\t{{.Size}}" --no-trunc
            Write-Host $history -ForegroundColor Gray
        } catch {
            Write-Host "‚ö†Ô∏è  No se pudo analizar $image" -ForegroundColor Yellow
        }
    }
}

# Verificar que Docker est√© funcionando
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker no encontrado o no est√° funcionando" -ForegroundColor Red
    exit 1
}

# Mostrar estad√≠sticas iniciales
if ($AnalyzeSize -or $CleanAll) {
    Get-DockerStats
}

# Ejecutar limpieza seg√∫n par√°metros
if ($CleanAll) {
    Write-Host "" -ForegroundColor White
    Write-Host "üßπ Limpieza completa iniciada..." -ForegroundColor Yellow
    
    Clean-Containers
    Clean-Images
    Clean-Volumes
    Clean-Networks
    
    Write-Host "" -ForegroundColor White
    Write-Host "üéâ Limpieza completa terminada" -ForegroundColor Green
    
} else {
    if ($PruneContainers) {
        Clean-Containers
    }
    
    if ($PruneImages) {
        Clean-Images
    }
    
    if ($PruneVolumes) {
        Clean-Volumes
    }
    
    if ($PruneNetworks) {
        Clean-Networks
    }
}

if ($OptimizeImages) {
    Write-Host "" -ForegroundColor White
    Optimize-Images
}

if ($AnalyzeSize) {
    Write-Host "" -ForegroundColor White
    Analyze-ImageSizes
}

# Mostrar estad√≠sticas finales
Write-Host "" -ForegroundColor White
Write-Host "üìä Estad√≠sticas finales:" -ForegroundColor Cyan
Get-DockerStats

# Recomendaciones
Write-Host "" -ForegroundColor White
Write-Host "üí° Recomendaciones:" -ForegroundColor Cyan
Write-Host "1. Ejecuta limpieza regularmente: ./optimize-docker.ps1 -CleanAll" -ForegroundColor White
Write-Host "2. Monitorea el uso de espacio: docker system df" -ForegroundColor White
Write-Host "3. Usa .dockerignore para reducir contexto de build" -ForegroundColor White
Write-Host "4. Considera usar registry externo para im√°genes de producci√≥n" -ForegroundColor White

Write-Host "" -ForegroundColor White
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "Limpieza completa:    ./optimize-docker.ps1 -CleanAll" -ForegroundColor White
Write-Host "Solo contenedores:    ./optimize-docker.ps1 -PruneContainers" -ForegroundColor White
Write-Host "Solo im√°genes:        ./optimize-docker.ps1 -PruneImages" -ForegroundColor White
Write-Host "An√°lisis de tama√±o:   ./optimize-docker.ps1 -AnalyzeSize" -ForegroundColor White
Write-Host "Optimizar im√°genes:   ./optimize-docker.ps1 -OptimizeImages" -ForegroundColor White