version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clasesde-pe-postgres
    environment:
      POSTGRES_DB: clasesde_pe
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - clasesde-pe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clasesde-pe-backend
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/clasesde_pe"
      JWT_SECRET: "dev-secret-change-in-production"
      PORT: 4000
      NODE_ENV: development
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - clasesde-pe-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: clasesde-pe-frontend
    environment:
      NEXT_PUBLIC_BACKEND_URL: "http://localhost:4000"
      NEXTAUTH_SECRET: "dev-secret-change-in-production"
      NEXTAUTH_URL: "http://localhost:3000"
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - clasesde-pe-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:

networks:
  clasesde-pe-network:
    driver: bridge