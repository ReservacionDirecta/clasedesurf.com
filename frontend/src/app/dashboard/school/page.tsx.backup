"use client";

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import CreateSchoolForm from '@/components/school/CreateSchoolForm';
import AdvancedStats from '@/components/school/AdvancedStats';
import RecentActivity from '@/components/school/RecentActivity';
import ClassesCalendarWidget from '@/components/school/ClassesCalendarWidget';
import { 
  Calendar, 
  Users, 
  BookOpen, 
  DollarSign, 
  TrendingUp, 
  Star, 
  Clock, 
  MapPin,
  Phone,
  Mail,
  Globe,
  ChevronRight,
  Activity,
  AlertCircle,
  CheckCircle,
  XCircle,
  Plus,
  Eye,
  Edit,
  BarChart3,
  PieChart,
  Target,
  Award,
  Waves,
  Settings
} from 'lucide-react';

interface School {
  id: number;
  name: string;
  location: string;
  description?: string;
  phone?: string;
  email?: string;
  website?: string;
  instagram?: string;
  facebook?: string;
  whatsapp?: string;
  profileImage?: string;
  rating?: number;
  totalReviews?: number;
  foundedYear?: number;
  specialties?: string[];
}

interface ClassData {
  id: number;
  title: string;
  date: string;
  capacity: number;
  price: number;
  level: string;
  availableSpots?: number;
  status?: string;
  instructor?: {
    id: number;
    name: string;
    profileImage?: string;
  };
  reservations?: any[];
}

interface DashboardStats {
  totalClasses: number;
  totalInstructors: number;
  totalStudents: number;
  monthlyRevenue: number;
  averageOccupancy: number;
  averageRating: number;
  weeklyClasses: number;
  pendingReservations: number;
  completedClasses: number;
  cancelledClasses: number;
  newStudentsThisMonth: number;
  topInstructor?: string;
  popularLevel?: string;
  peakHours?: string;
  revenueGrowth?: number;
  studentGrowth?: number;
  classGrowth?: number;
}

interface RecentActivity {
  id: number;
  type: 'reservation' | 'payment' | 'class' | 'instructor' | 'student';
  title: string;
  description: string;
  timestamp: string;
  status?: 'success' | 'warning' | 'error' | 'info';
  user?: string;
  amount?: number;
  metadata?: {
    className?: string;
    instructorName?: string;
    studentCount?: number;
  };
}

export default function SchoolDashboardPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  const [school, setSchool] = useState<School | null>(null);
  const [classes, setClasses] = useState<ClassData[]>([]);
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [selectedTimeframe, setSelectedTimeframe] = useState<'week' | 'month' | 'year'>('month');

  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session) {
      router.push('/login');
      return;
    }

    // Check if user is SCHOOL_ADMIN
    if (session.user?.role !== 'SCHOOL_ADMIN') {
      router.push('/dashboard/student/profile');
      return;
    }

    fetchSchoolData();
  }, [session, status, router]);

  // Update stats when timeframe changes
  useEffect(() => {
    if (school) {
      generateMockStats(school);
    }
  }, [selectedTimeframe, school]);

  const fetchSchoolData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Get authentication token
      const token = (session as any)?.backendToken;
      const headers: any = {};
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      // Try to fetch school associated with current user
      const response = await fetch('/api/schools/my-school', { headers });
      
      if (response.status === 404) {
        // No school found for this user
        setSchool(null);
        setClasses([]);
        setStats(null);
        setRecentActivity([]);
        return;
      }
      
      if (!response.ok) {
        throw new Error('Failed to fetch school data');
      }
      
      const schoolData = await response.json();
      setSchool(schoolData);
      
      // Fetch classes for this school
      const classesResponse = await fetch(`/api/schools/${schoolData.id}/classes`, { headers });
      if (classesResponse.ok) {
        const classesData = await classesResponse.json();
        setClasses(classesData);
      } else {
        setClasses([]);
      }

      // Generate mock stats and activity data (in real app, these would come from API)
      generateMockStats(schoolData);
      generateMockActivity();
      
    } catch (err) {
      console.error('Error fetching school data:', err);
      setError(err instanceof Error ? err.message : 'Error loading data');
    } finally {
      setLoading(false);
    }
  };

  const generateMockStats = (schoolData: School) => {
    const mockStats: DashboardStats = {
      totalClasses: classes.length || 12,
      totalInstructors: 5,
      totalStudents: 127,
      monthlyRevenue: selectedTimeframe === 'week' ? 2100 : selectedTimeframe === 'month' ? 8450 : 98500,
      averageOccupancy: 78,
      averageRating: 4.8,
      weeklyClasses: 12,
      pendingReservations: 8,
      completedClasses: 45,
      cancelledClasses: 3,
      newStudentsThisMonth: 23,
      topInstructor: 'Gabriel Barrera',
      popularLevel: 'Principiante',
      peakHours: '10:00 - 12:00',
      revenueGrowth: 15,
      studentGrowth: 18,
      classGrowth: 12
    };
    setStats(mockStats);
  };

  const generateMockActivity = () => {
    const mockActivity: RecentActivity[] = [
      {
        id: 1,
        type: 'reservation',
        title: 'Nueva Reserva',
        description: 'María González reservó Surf para Principiantes',
        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 min ago
        status: 'success',
        user: 'María González',
        metadata: {
          className: 'Surf Principiantes',
          instructorName: 'Gabriel Barrera'
        }
      },
      {
        id: 2,
        type: 'payment',
        title: 'Pago Recibido',
        description: 'Pago confirmado por clase de surf avanzado',
        timestamp: new Date(Date.now() - 45 * 60 * 1000).toISOString(), // 45 min ago
        status: 'success',
        amount: 85,
        user: 'Carlos Mendoza',
        metadata: {
          className: 'Surf Avanzado'
        }
      },
      {
        id: 3,
        type: 'class',
        title: 'Clase Completada',
        description: 'Surf Intermedio completada exitosamente',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
        status: 'success',
        metadata: {
          className: 'Surf Intermedio',
          instructorName: 'Gabriel Barrera',
          studentCount: 8
        }
      },
      {
        id: 4,
        type: 'student',
        title: 'Nuevo Estudiante',
        description: 'Carlos Mendoza se registró en la plataforma',
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), // 3 hours ago
        status: 'info',
        user: 'Carlos Mendoza'
      },
      {
        id: 5,
        type: 'reservation',
        title: 'Reserva Cancelada',
        description: 'Ana Torres canceló su reserva para mañana',
        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago
        status: 'warning',
        user: 'Ana Torres',
        metadata: {
          className: 'Surf Principiantes'
        }
      },
      {
        id: 6,
        type: 'payment',
        title: 'Pago Pendiente',
        description: 'Recordatorio de pago enviado a estudiante',
        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), // 6 hours ago
        status: 'warning',
        user: 'Luis Ramírez',
        amount: 65
      },
      {
        id: 7,
        type: 'instructor',
        title: 'Instructor Disponible',
        description: 'Gabriel Barrera confirmó disponibilidad para esta semana',
        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(), // 8 hours ago
        status: 'info',
        user: 'Gabriel Barrera'
      },
      {
        id: 8,
        type: 'class',
        title: 'Clase Programada',
        description: 'Nueva clase de surf para principiantes programada',
        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 hours ago
        status: 'info',
        metadata: {
          className: 'Surf Principiantes',
          instructorName: 'Gabriel Barrera'
        }
      }
    ];
    setRecentActivity(mockActivity);
  };

  const handleSchoolCreated = (newSchool: School) => {
    setSchool(newSchool);
    setShowCreateForm(false);
    setClasses([]);
  };

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen bg-gray-100 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[1, 2, 3].map((i) => (
                <div key={i} className="bg-white p-6 rounded-lg shadow">
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-100 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <h2 className="text-xl font-semibold text-red-800 mb-2">Error</h2>
            <p className="text-red-600 mb-4">{error}</p>
            <button
              onClick={fetchSchoolData}
              className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors"
            >
              Intentar de nuevo
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Show create form if no school exists or user wants to create one
  if (showCreateForm || (!school && !loading)) {
    return (
      <CreateSchoolForm 
        onSchoolCreated={handleSchoolCreated}
        onCancel={school ? () => setShowCreateForm(false) : undefined}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Enhanced Welcome Header - Mobile Optimized */}
        <div className="mb-6 sm:mb-8">
          <div className="flex flex-col space-y-4 sm:space-y-6">
            {/* Header Section */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div className="flex items-start sm:items-center mb-4 sm:mb-0">
                <div className="p-2 sm:p-3 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg sm:rounded-xl mr-3 sm:mr-4 flex-shrink-0">
                  <Waves className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
                </div>
                <div className="min-w-0 flex-1">
                  <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 leading-tight">
                    ¡Hola, {session?.user?.name?.split(' ')[0]}! 
                  </h1>
                  <p className="text-base sm:text-lg lg:text-xl text-gray-600 mt-1 truncate">
                    {school?.name || 'tu Escuela de Surf'}
                  </p>
                </div>
              </div>
              
              {/* Mobile Quick Actions */}
              <div className="flex gap-2 sm:hidden">
                <Link
                  href="/dashboard/school/classes/new"
                  className="flex-1 inline-flex items-center justify-center px-3 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Clase
                </Link>
                <Link
                  href="/dashboard/school/calendar"
                  className="flex-1 inline-flex items-center justify-center px-3 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium"
                >
                  <Calendar className="w-4 h-4 mr-1" />
                  Ver
                </Link>
              </div>
            </div>
            
            {/* Quick Stats Bar - Mobile Optimized */}
            <div className="grid grid-cols-1 sm:flex sm:flex-wrap gap-2 sm:gap-4 text-xs sm:text-sm">
              <div className="flex items-center justify-between sm:justify-start text-green-600 bg-green-50 px-3 py-2 rounded-lg sm:bg-transparent sm:px-0 sm:py-0">
                <div className="flex items-center">
                  <CheckCircle className="w-4 h-4 mr-2 sm:mr-1" />
                  <span className="font-medium">Clases completadas</span>
                </div>
                <span className="font-bold sm:hidden">{stats?.completedClasses || 0}</span>
              </div>
              <div className="flex items-center justify-between sm:justify-start text-blue-600 bg-blue-50 px-3 py-2 rounded-lg sm:bg-transparent sm:px-0 sm:py-0">
                <div className="flex items-center">
                  <Clock className="w-4 h-4 mr-2 sm:mr-1" />
                  <span className="font-medium">Reservas pendientes</span>
                </div>
                <span className="font-bold sm:hidden">{stats?.pendingReservations || 0}</span>
              </div>
              <div className="flex items-center justify-between sm:justify-start text-purple-600 bg-purple-50 px-3 py-2 rounded-lg sm:bg-transparent sm:px-0 sm:py-0">
                <div className="flex items-center">
                  <Star className="w-4 h-4 mr-2 sm:mr-1" />
                  <span className="font-medium">Rating promedio</span>
                </div>
                <span className="font-bold sm:hidden">{stats?.averageRating || 0}/5</span>
              </div>
            </div>
          </div>

            {/* Time Frame Selector - Mobile Optimized */}
            <div className="hidden sm:flex flex-col gap-4">
              <div className="flex bg-white rounded-lg p-1 shadow-sm border w-fit">
                {(['week', 'month', 'year'] as const).map((timeframe) => (
                  <button
                    key={timeframe}
                    onClick={() => setSelectedTimeframe(timeframe)}
                    className={`px-3 sm:px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                      selectedTimeframe === timeframe
                        ? 'bg-blue-500 text-white shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    {timeframe === 'week' ? 'Semana' : timeframe === 'month' ? 'Mes' : 'Año'}
                  </button>
                ))}
              </div>
              
              {/* Desktop Quick Actions */}
              <div className="flex gap-2">
                <Link
                  href="/dashboard/school/classes/new"
                  className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg transition-all duration-200 shadow-md hover:shadow-lg"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Nueva Clase
                </Link>
                <Link
                  href="/dashboard/school/calendar"
                  className="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 border border-gray-300 rounded-lg transition-colors shadow-sm"
                >
                  <Calendar className="w-4 h-4 mr-2" />
                  Calendario
                </Link>
              </div>
            </div>
            
            {/* Mobile Time Frame Selector */}
            <div className="sm:hidden">
              <div className="flex bg-white rounded-lg p-1 shadow-sm border w-full">
                {(['week', 'month', 'year'] as const).map((timeframe) => (
                  <button
                    key={timeframe}
                    onClick={() => setSelectedTimeframe(timeframe)}
                    className={`flex-1 py-2 px-2 rounded-md text-sm font-medium transition-colors ${
                      selectedTimeframe === timeframe
                        ? 'bg-blue-500 text-white shadow-sm'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    {timeframe === 'week' ? 'Semana' : timeframe === 'month' ? 'Mes' : 'Año'}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced School Info Card - Mobile Optimized */}
        {school && (
          <div className="bg-white rounded-xl sm:rounded-2xl shadow-xl overflow-hidden mb-6 sm:mb-8 border border-gray-100">
            <div className="bg-gradient-to-r from-blue-600 via-blue-700 to-cyan-600 px-4 sm:px-6 lg:px-8 py-4 sm:py-6">
              <div className="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:items-center sm:justify-between">
                <div className="flex items-start space-x-3 sm:space-x-4">
                  {school.profileImage ? (
                    <img 
                      src={school.profileImage} 
                      alt={school.name}
                      className="w-16 h-16 sm:w-20 sm:h-20 rounded-lg sm:rounded-xl object-cover border-2 sm:border-4 border-white/20 flex-shrink-0"
                    />
                  ) : (
                    <div className="w-16 h-16 sm:w-20 sm:h-20 bg-white/20 rounded-lg sm:rounded-xl flex items-center justify-center border-2 sm:border-4 border-white/20 flex-shrink-0">
                      <Waves className="w-8 h-8 sm:w-10 sm:h-10 text-white" />
                    </div>
                  )}
                  <div className="text-white min-w-0 flex-1">
                    <h2 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-1 sm:mb-2 leading-tight">{school.name}</h2>
                    {school.description && (
                      <p className="text-blue-100 mb-2 sm:mb-3 text-sm sm:text-base lg:text-lg line-clamp-2">{school.description}</p>
                    )}
                    
                    {/* Rating and Reviews - Mobile Optimized */}
                    {school.rating && (
                      <div className="flex items-center mb-2 sm:mb-3">
                        <div className="flex items-center">
                          {[...Array(5)].map((_, i) => (
                            <Star 
                              key={i} 
                              className={`w-4 h-4 sm:w-5 sm:h-5 ${i < Math.floor(school.rating!) ? 'text-yellow-400 fill-current' : 'text-white/40'}`} 
                            />
                          ))}
                        </div>
                        <span className="ml-2 text-white font-medium text-sm sm:text-base">
                          {school.rating} ({school.totalReviews || 0})
                        </span>
                      </div>
                    )}

                    {/* Contact Info - Mobile Optimized */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 text-blue-100">
                      <div className="flex items-center">
                        <MapPin className="w-3 h-3 sm:w-4 sm:h-4 mr-2 flex-shrink-0" />
                        <span className="text-xs sm:text-sm truncate">{school.location}</span>
                      </div>
                      {school.phone && (
                        <div className="flex items-center">
                          <Phone className="w-3 h-3 sm:w-4 sm:h-4 mr-2 flex-shrink-0" />
                          <span className="text-xs sm:text-sm">{school.phone}</span>
                        </div>
                      )}
                      {school.email && (
                        <div className="flex items-center sm:col-span-2">
                          <Mail className="w-3 h-3 sm:w-4 sm:h-4 mr-2 flex-shrink-0" />
                          <span className="text-xs sm:text-sm truncate">{school.email}</span>
                        </div>
                      )}
                      {school.website && (
                        <div className="flex items-center sm:col-span-2">
                          <Globe className="w-3 h-3 sm:w-4 sm:h-4 mr-2 flex-shrink-0" />
                          <span className="text-xs sm:text-sm truncate">{school.website}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Action Buttons - Mobile Optimized */}
                <div className="flex flex-row sm:flex-col gap-2 sm:gap-3 sm:ml-6">
                  <Link
                    href="/dashboard/school/profile"
                    className="flex-1 sm:flex-none inline-flex items-center justify-center px-3 sm:px-6 py-2 sm:py-3 bg-white text-blue-600 rounded-lg sm:rounded-xl hover:bg-blue-50 transition-all duration-200 font-medium shadow-lg hover:shadow-xl text-sm sm:text-base"
                  >
                    <Edit className="w-4 h-4 mr-1 sm:mr-2" />
                    <span className="hidden sm:inline">Editar Perfil</span>
                    <span className="sm:hidden">Editar</span>
                  </Link>
                  <Link
                    href="/dashboard/school/calendar"
                    className="flex-1 sm:flex-none inline-flex items-center justify-center px-3 sm:px-6 py-2 sm:py-3 bg-blue-800 text-white rounded-lg sm:rounded-xl hover:bg-blue-900 transition-all duration-200 font-medium shadow-lg hover:shadow-xl text-sm sm:text-base"
                  >
                    <Calendar className="w-4 h-4 mr-1 sm:mr-2" />
                    <span className="hidden sm:inline">Ver Calendario</span>
                    <span className="sm:hidden">Calendario</span>
                  </Link>
                </div>
              </div>
            </div>

            {/* Specialties - Mobile Optimized */}
            {school.specialties && school.specialties.length > 0 && (
              <div className="px-4 sm:px-6 lg:px-8 py-3 sm:py-4 bg-gray-50 border-t border-gray-100">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Especialidades:</h4>
                <div className="flex flex-wrap gap-1.5 sm:gap-2">
                  {school.specialties.map((specialty, index) => (
                    <span 
                      key={index}
                      className="inline-flex items-center px-2 sm:px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                    >
                      <Award className="w-3 h-3 mr-1 flex-shrink-0" />
                      <span className="truncate">{specialty}</span>
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Advanced Statistics Dashboard */}
        {stats && (
          <div className="mb-8">
            <AdvancedStats 
              stats={stats} 
              timeframe={selectedTimeframe}
              onTimeframeChange={setSelectedTimeframe}
            />
          </div>
        )}

        {/* Dashboard Grid Layout - Mobile Optimized */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8">
          {/* Calendar Widget - Mobile First */}
          <div className="lg:col-span-2 order-2 lg:order-1">
            <ClassesCalendarWidget 
              classes={classes.map(cls => ({
                id: cls.id,
                title: cls.title,
                date: cls.date,
                time: new Date(cls.date).toLocaleTimeString('es-ES', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                }),
                capacity: cls.capacity,
                enrolled: cls.capacity - (cls.availableSpots || 0),
                level: cls.level,
                instructor: cls.instructor,
                status: 'scheduled' as const
              }))}
              onClassClick={(classId) => {
                window.location.href = `/dashboard/school/classes/${classId}/reservations`;
              }}
            />
          </div>

          {/* Recent Activity - Mobile First */}
          <div className="order-1 lg:order-2">
            <RecentActivity activities={recentActivity} maxItems={6} />
          </div>
        </div>

        {/* Quick Actions - Mobile Optimized */}
        <div className="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 sm:mb-8">
          <Link
            href="/dashboard/school/classes"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <BookOpen className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-blue-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Clases</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Gestionar clases</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/instructors"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-purple-100 rounded-lg group-hover:bg-purple-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <Users className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-purple-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Instructores</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Equipo</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/students"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <Users className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-green-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Estudiantes</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Base de datos</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/payments"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-yellow-100 rounded-lg group-hover:bg-yellow-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <DollarSign className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-yellow-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Pagos</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Gestión</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/reservations"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-indigo-100 rounded-lg group-hover:bg-indigo-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <CheckCircle className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-indigo-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Reservas</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Gestionar</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/calendar"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-orange-100 rounded-lg group-hover:bg-orange-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <Calendar className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-orange-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Calendario</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Vista general</p>
              </div>
            </div>
          </Link>

          <Link
            href="/dashboard/school/settings"
            className="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-shadow group col-span-2 sm:col-span-1"
          >
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="p-2 sm:p-3 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors mb-2 sm:mb-0 sm:mr-3 lg:mr-4 self-start">
                <Settings className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-gray-600" />
              </div>
              <div className="min-w-0 flex-1">
                <h3 className="text-sm sm:text-base lg:text-lg font-semibold text-gray-900 leading-tight">Configuración</h3>
                <p className="text-xs sm:text-sm text-gray-600 mt-1 hidden sm:block lg:hidden xl:block">Personalizar</p>
              </div>
            </div>
          </Link>
        </div>

        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Classes Stats */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl">
                <BookOpen className="w-8 h-8 text-white" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Total</p>
                <p className="text-3xl font-bold text-blue-600">{stats?.totalClasses || classes.length}</p>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Clases Activas</h3>
              <div className="flex items-center text-green-500 text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                +12%
              </div>
            </div>
            <div className="mt-3 flex items-center text-sm text-gray-600">
              <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
              {stats?.completedClasses || 45} completadas este mes
            </div>
          </div>

          {/* Instructors Stats */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl">
                <Users className="w-8 h-8 text-white" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Activos</p>
                <p className="text-3xl font-bold text-purple-600">{stats?.totalInstructors || 5}</p>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Instructores</h3>
              <div className="flex items-center text-green-500 text-sm">
                <Star className="w-4 h-4 mr-1" />
                4.9★
              </div>
            </div>
            <div className="mt-3 flex items-center text-sm text-gray-600">
              <Award className="w-4 h-4 mr-1 text-purple-500" />
              Top: {stats?.topInstructor || 'Gabriel Barrera'}
            </div>
          </div>

          {/* Students Stats */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-gradient-to-br from-green-500 to-green-600 rounded-xl">
                <Users className="w-8 h-8 text-white" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Total</p>
                <p className="text-3xl font-bold text-green-600">{stats?.totalStudents || 127}</p>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Estudiantes</h3>
              <div className="flex items-center text-green-500 text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                +18%
              </div>
            </div>
            <div className="mt-3 flex items-center text-sm text-gray-600">
              <Plus className="w-4 h-4 mr-1 text-green-500" />
              {stats?.newStudentsThisMonth || 23} nuevos este mes
            </div>
          </div>

          {/* Revenue Stats */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
              <div className="p-3 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-xl">
                <DollarSign className="w-8 h-8 text-white" />
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500">Este mes</p>
                <p className="text-3xl font-bold text-yellow-600">S/. {stats?.monthlyRevenue?.toLocaleString() || '8,450'}</p>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Ingresos</h3>
              <div className="flex items-center text-green-500 text-sm">
                <TrendingUp className="w-4 h-4 mr-1" />
                +25%
              </div>
            </div>
            <div className="mt-3 flex items-center text-sm text-gray-600">
              <Target className="w-4 h-4 mr-1 text-yellow-500" />
              Meta: S/. 10,000
            </div>
          </div>
        </div>

        {/* Performance Metrics */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* Occupancy Chart */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Ocupación Promedio</h3>
              <BarChart3 className="w-5 h-5 text-gray-400" />
            </div>
            <div className="flex items-end space-x-2 mb-4">
              <span className="text-4xl font-bold text-indigo-600">{stats?.averageOccupancy || 78}%</span>
              <div className="flex items-center text-green-500 text-sm mb-2">
                <TrendingUp className="w-4 h-4 mr-1" />
                +5% vs mes anterior
              </div>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-indigo-500 to-indigo-600 h-3 rounded-full transition-all duration-500"
                style={{ width: `${stats?.averageOccupancy || 78}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-600 mt-2">
              Horario pico: {stats?.peakHours || '10:00 - 12:00'}
            </p>
          </div>

          {/* Rating Overview */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Rating Promedio</h3>
              <Star className="w-5 h-5 text-gray-400" />
            </div>
            <div className="flex items-center space-x-3 mb-4">
              <span className="text-4xl font-bold text-orange-600">{stats?.averageRating || 4.8}</span>
              <div className="flex items-center">
                {[...Array(5)].map((_, i) => (
                  <Star 
                    key={i} 
                    className={`w-6 h-6 ${i < Math.floor(stats?.averageRating || 4.8) ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                  />
                ))}
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">5 estrellas</span>
                <span className="font-medium">68%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-yellow-400 h-2 rounded-full" style={{ width: '68%' }}></div>
              </div>
            </div>
          </div>

          {/* Weekly Schedule */}
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Esta Semana</h3>
              <Calendar className="w-5 h-5 text-gray-400" />
            </div>
            <div className="flex items-end space-x-2 mb-4">
              <span className="text-4xl font-bold text-red-600">{stats?.weeklyClasses || 12}</span>
              <span className="text-gray-600 mb-2">clases</span>
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Nivel popular:</span>
                <span className="font-medium text-blue-600">{stats?.popularLevel || 'Principiante'}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Reservas pendientes:</span>
                <span className="font-medium text-orange-600">{stats?.pendingReservations || 8}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Cancelaciones:</span>
                <span className="font-medium text-red-600">{stats?.cancelledClasses || 3}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Activity & Quick Actions */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Recent Activity */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100">
            <div className="p-6 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-semibold text-gray-900">Actividad Reciente</h3>
                <Activity className="w-5 h-5 text-gray-400" />
              </div>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                {recentActivity.slice(0, 5).map((activity) => (
                  <div key={activity.id} className="flex items-start space-x-3">
                    <div className={`p-2 rounded-full flex-shrink-0 ${
                      activity.status === 'success' ? 'bg-green-100' :
                      activity.status === 'warning' ? 'bg-yellow-100' :
                      activity.status === 'error' ? 'bg-red-100' : 'bg-blue-100'
                    }`}>
                      {activity.type === 'reservation' && <Calendar className="w-4 h-4 text-blue-600" />}
                      {activity.type === 'payment' && <DollarSign className="w-4 h-4 text-green-600" />}
                      {activity.type === 'class' && <BookOpen className="w-4 h-4 text-purple-600" />}
                      {activity.type === 'student' && <Users className="w-4 h-4 text-indigo-600" />}
                      {activity.type === 'instructor' && <Award className="w-4 h-4 text-orange-600" />}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between">
                        <p className="text-sm font-medium text-gray-900">{activity.title}</p>
                        <span className="text-xs text-gray-500">
                          {new Date(activity.timestamp).toLocaleTimeString('es-ES', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </span>
                      </div>
                      <p className="text-xs text-gray-600 truncate">{activity.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100">
            <div className="p-6 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-semibold text-gray-900">Acciones Rápidas</h3>
                <Settings className="w-5 h-5 text-gray-400" />
              </div>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <Link
                  href="/dashboard/school/classes/new"
                  className="flex flex-col items-center p-4 bg-blue-50 hover:bg-blue-100 rounded-xl transition-colors group"
                >
                  <Plus className="w-8 h-8 text-blue-600 mb-2" />
                  <span className="text-sm font-medium text-gray-900 group-hover:text-blue-900">Nueva Clase</span>
                </Link>
                <Link
                  href="/dashboard/school/instructors/new"
                  className="flex flex-col items-center p-4 bg-purple-50 hover:bg-purple-100 rounded-xl transition-colors group"
                >
                  <Users className="w-8 h-8 text-purple-600 mb-2" />
                  <span className="text-sm font-medium text-gray-900 group-hover:text-purple-900">Nuevo Instructor</span>
                </Link>
                <Link
                  href="/dashboard/school/calendar"
                  className="flex flex-col items-center p-4 bg-green-50 hover:bg-green-100 rounded-xl transition-colors group"
                >
                  <Calendar className="w-8 h-8 text-green-600 mb-2" />
                  <span className="text-sm font-medium text-gray-900 group-hover:text-green-900">Ver Calendario</span>
                </Link>
                <Link
                  href="/dashboard/school/reports"
                  className="flex flex-col items-center p-4 bg-yellow-50 hover:bg-yellow-100 rounded-xl transition-colors group"
                >
                  <BarChart3 className="w-8 h-8 text-yellow-600 mb-2" />
                  <span className="text-sm font-medium text-gray-900 group-hover:text-yellow-900">Reportes</span>
                </Link>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Classes */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Mis Clases</h2>
            <Link
              href="/dashboard/school/classes"
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              Gestionar Clases
            </Link>
          </div>

          {classes.length === 0 ? (
            <div className="text-center py-12">
              <svg className="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No hay clases programadas</h3>
              <p className="text-gray-600 mb-4">Crea tu primera clase para comenzar a recibir estudiantes</p>
              <Link
                href="/dashboard/school/classes"
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
              >
                Crear Primera Clase
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Clase
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Fecha
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Nivel
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Precio
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Disponibilidad
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {classes.slice(0, 5).map((classItem) => (
                    <tr key={classItem.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{classItem.title}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {new Date(classItem.date).toLocaleDateString('es-ES')}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                          {classItem.level}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        ${classItem.price}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {classItem.availableSpots || 0} / {classItem.capacity}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}